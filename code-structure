ShoppingListController
—ShoppingListServiceImp->getShoppingList
——setPreferredStoreInfo
————findPrimaryStore(householdID)
———————controlTableLocator.findByControlTableId(ControlTableLocator.HOUSEHOLD_STORE)
———————QueryBuilder.select("store_id").from(table).where(eq("household_id", bindMarker()))
————findStoreDetails(userStoreId, registeredZipCode)
——————— SELECT store_id, price_zone_id, banner_nm, address_line_1, address_line_2, city, state, country, postal_cd, region_id,
             rog_cd, division_nm, capture_dt, timezone_nm FROM emju.store WHERE store_id = :storeId")
——validateStoreInRequest
————storeCache.getStoreDetailsById(Integer.parseInt(storeId))
———————SELECT store_id, price_zone_id, banner_nm, address_line_1, address_line_2, city, state, country, postal_cd, region_id,
       rog_cd, division_nm, capture_dt, timezone_nm FROM emju.store WHERE store_id = :storeId
——offerStatusService.findRedeemedOffersForRemoval(houseHoldId)
————-"SELECT offer_id FROM emju.household_redeemed_offer_nodisplay WHERE household_id = :householdId"
——shoppingListDAO.getShoppingListItems(shoppingListVO)
————-"SELECT retail_customer_id, household_id, shopping_list_nm, item_type_cd, store_id, " +
     "item_id, category_id, checked_ind, clip_id, clip_ts, club_card_nbr, delete_ts, " +
     "item_desc, item_end_dt, item_image, item_price_value, item_promo_price, item_quantity, " +
     "item_ref_id, item_start_dt, item_title, last_upd_ts, last_upd_usr_id, shopping_list_desc, " +
     "source_application_cd, ttl(clip_id) FROM emju.mylist_items " + 
     "WHERE retail_customer_id = ? AND household_id = ? AND shopping_list_nm = ?";
——setItemDetails
————matchOfferService.getRelatedOffers(upcItemMap, shoppingListVO.getHeaderVO())
———————getPartnerAllocationOffers
————————————partnerAllocationDAO.findCCPartnerAllocation(householdId, householdSessionId, allocationDt)
———————————————“SELECT offer_id FROM emju.cc_hh_realtime_partner_allocation WHERE household_id = :householdId " +
                "AND household_session_id = :householdSessionId AND allocation_dt = :allocationDt"
————————————getCatalinaAllocationsAsync(threadCtx, householdId, cardNbr)
———————————————serviceClient.getCatalinaAllocatedOffers(householdId, cardNbr)         (WebService Call)
———————————————offerCache.getOfferDetailsByCopientIds(externalOfferIds, ServiceProvider.CATALINA)
——————————————————redisManager.mget
——————————————————SELECT * FROM emju.copient_offer WHERE external_offer_id IN ?
——————————————————redisManager.set
————————————getRiQAllocationsAsync(threadCtx, householdId)
———————————————serviceClient.getRiQAllocatedOffers(householdId)
———————————————offerCache.getOfferDetailsByAggregatorId(aggregatorOfferId, ServiceProvider.COUPONSINC)
————————————getCouponsIncAllocationsAsync(threadCtx, householdId, cardNbr)
———————————————serviceClient.getCouponsIncAllocatedOffers(householdId, cardNbr)
———————————————offerCache.getOfferDetailsByAggregatorId(aggregatorOfferId, ServiceProvider.COUPONSINC)
————————————cacheCCVendorAllocation(vendorOffers)
———————————————vendorAllocation.forEach((final CCPartnerOffer o) -> { batch.add(mapper.saveQuery(o, TIME_TO_LIVE)); });
———————getYCSOffers
————————————purchasedItemDAO.findItemsByHHIdAndScanCode(householdId, upcList)
———————————————controlTblLocator.findByControlTableId(ControlTableLocator.PURCHASE_HISTORY)
———————————————select * from table where household_id=? and retail_scan_cd in ?
————————————clubPriceDao.findItemPrices(timeZone, storeId, retailScanCds)
———————————————controlTableLocator.findByControlTableId(ControlTableLocator.STORE_CLUB_PRICE)
———————————————select from table where store_id = ? and retail_scan_cd= ? and effective_start_dt <= ?
———————retailScanCache.getRetailScanOfferDetailByScanCds(array)
————————————redisCacheManager.mget(strKeys)
————————————rtlScanOfferDAO.getRetailScanOfferDetailByScanCdsAsync(cacheMissRetailScanCds)
———————————————controlTableLocator.findByControlTableId(ControlTableLocator.RETAIL_SCAN_OFFER)
———————————————"select * from emju.").append(table).append(" where retail_scan_cd = ?;"
————————————redisCacheManager.set(rKey, rtlScanOfferJson)
———————offerStatusService.findRedeemedOffersForRemoval(householdId)
————————————"SELECT offer_id FROM emju.household_redeemed_offer_nodisplay WHERE household_id = :householdId"
———————offerStatusService.findOfferClipStatus(headerVO.getSwycustguid(), householdId,relatedOfferIds, null)
————————————offerStatusDAO.findMyCardOffersById(customerGUID, householdId, offerTypes, offerIds)
———————————————"SELECT offer_id, customer_friendly_program_id, clip_id, offer_clip_ts FROM emju.clipped_offer " +
               "WHERE retail_customer_id = :customerGUID AND household_id = :householdId " +
               "AND customer_friendly_program_id = :offerPgm AND offer_id IN :offerIds"
————————————offerStatusDAO.findMyListItems(customerGUID, householdId)
———————————————SELECT item_ref_id, item_id, item_type_cd, delete_ts FROM emju.mylist_items 
               WHERE retail_customer_id = :customerGUID AND household_id = :householdId
               AND shopping_list_nm = :defaultListNm
———————getPDOffers
————————————pdAllocationDAO.findPDCustomAllocation(householdId, regionId,offerList)
———————————————controlTblLocator.findByControlTableId(ControlTableLocator.PD_CUSTOM_HOUSEHOLD_OFFER)
———————————————select * from table where household_id = ? and region_id = ? and offer_id in ?
————————————offerCache.getOfferDetailsByIds(array)
———————————————redisManager.mget(redisKeysArray)
———————————————select * from emju.offer_detail where offer_id = ?
————————————pricingDAO.findOfferPrices(storeId, validPDOfferIds)
———————————————controlTblLocator.findByControlTableId(ControlTableLocator.OFFER_STORE_PRICE)
———————————————QueryBuilder.select().from(table).where(eq("store_id", bindMarker())).and(in("offer_id", bindMarker()))
———————getCCOffers
————————————ccAllocationDAO.findCCAllocation(zipCode, offerList)
———————————————SELECT * FROM emju.postal_cc_allocation WHERE postal_cd = :postalCd AND offer_id IN :offerIds
————————————offerCache.getOfferDetailsByIds(array)
———————————————redisManager.mget(redisKeysArray)
———————————————select * from emju.offer_detail where offer_id = ?
————itemDetaislService.getAsyncDetails(itemType, itemMap, shoppingListVO)
———————UPCItemDetailAsyncRetriever
———————————redisCacheManager.mget(strKeys)
———————————controlTableLocator.findByControlTableId(ControlTableLocator.RETAIL_SCAN_OFFER)
———————————select * from emju.table where retail_scan_cd = ?
———————CCItemDetailAsyncRetriever
———————————ccAllocationDAO.findCCAllocation(postalCode)
———————————————select * from postal_cc_allocation  where postal_cd=?
———————————offerCache.getOfferDetailsByIds(validOfferIdsArray)
———————————————redisManager.mget(redisKeysArray)
———————————————select * from emju.offer_detail where offer_id = ?
———————PDItemDetailAsyncRetriever
———————————pdAllocationDAO.findPDCustomAllocation(Long.valueOf(hhId), regionId)
———————————————controlTblLocator.findByControlTableId(ControlTableLocator.PD_CUSTOM_HOUSEHOLD_OFFER);
———————————————select * from  table  where household_id = ? and region_id = ?
———————————pdAllocationDAO.findPDDefaultAllocation(storeId)
———————————————SELECT * FROM emju.pd_default_offer WHERE store_id = :storeId
———————————offerCache.getOfferDetailsByIds(validOfferIdsArray)
———————————————redisManager.mget(redisKeysArray)
———————————————select * from emju.offer_detail where offer_id = ?
———————YCSItemDetailAsyncRetriever
———————————controlTableLocator.findByControlTableId(ControlTableLocator.STORE_CLUB_PRICE)
———————————select from table where store_id=?
———————WSItemDetailAsyncRetriever
———————————redisManager.mget(strKeys)
———————————weeklyAddDAO.getWeeklyAddByOfferId(cacheMissedOffers)
———————————————SELECT * FROM emju.offer_weekly_ad WHERE offer_id IN ?
———————————redisManager.setString(sKey, jsonValue, duration)
————itemDetaislService.setItemDetails(itemType, itemMap, shoppingListVO, matchedOffers)
————itemDetaislService.setItemDetails(entry.getKey(), itemDetail, itemMap, shoppingListVO)
——setUpdatableTTLItems
————mapper.saveQuery(item, Option.ttl(item.getTtl()))
——setCategoryDetails
————if(ValidationHelper.isEmpty(categoryMap))
            redisManager.set(CATEGORY_CACHE_KEY_PREFIX …
            redisManager.get(CATEGORY_CACHE_KEY_PREFIX …
